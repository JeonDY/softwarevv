Index: src/main/java/Sys/Timer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Sys;\r\n\r\nimport java.util.*;\r\nimport java.time.*;\r\n\r\n/**\r\n *\r\n */\r\npublic class Timer implements  Mode{\r\n\r\n    /**\r\n     * Default constructor\r\n     */\r\n    private boolean isActivated;\r\n    @Override\r\n    public void setActive(boolean act) {\r\n        this.isActivated=act;\r\n    }\r\n\r\n    @Override\r\n    public boolean getActive() {\r\n        return this.isActivated;\r\n    }\r\n\r\n    public Timer() {\r\n        isActivated=true;\r\n        timerTime= LocalDateTime.of(2000,1,1,0,0,0);\r\n        pauseTimerFlag=true;\r\n\r\n\r\n    }\r\n\r\n    //이거는 안쓸듯\r\n    private LocalDateTime settingTimer;\r\n\r\n    //시간 을 99 까지 표현해야 하므로 Display할때 day까지 묶어서 계산해야함\r\n    // 추가적으로 Day는 0값을 가질수 없어 1으로 초기값을 설정 그래서 Hour계산할때\r\n    // (Day-1)*24 + Hour 이 Display될 시간\r\n    private LocalDateTime timerTime;\r\n\r\n    private Boolean saveTimerFlag;\r\n\r\n    private Boolean pauseTimerFlag;\r\n\r\n    //추가한 변수\r\n    private int timerCursor;\r\n    //추가한 함수\r\n    public void enterEditTimer(){\r\n        pauseTimerFlag=true;\r\n        saveTimerFlag=false;\r\n    }\r\n\r\n    public void changeCursor() {\r\n        // TODO implement here\r\n        timerCursor= (timerCursor+1)%3;\r\n    }\r\n\r\n    // 0~59 처리 포함 되어야 함 분을 59->0 해도 시간 증가 안하게\r\n    public void increaseData() {\r\n        // TODO implement here\r\n        switch (timerCursor){\r\n            case 0:\r\n                if(timerTime.getDayOfMonth() >= 4 && timerTime.getHour() >=3 ){\r\n                    timerTime= LocalDateTime.of(2000,1,1,0,timerTime.getMinute(),timerTime.getSecond());\r\n                }\r\n                else{\r\n                    timerTime.plusHours(1);\r\n                }\r\n                break;\r\n            case 1:\r\n                if(timerTime.getMinute() >= 59){\r\n                    timerTime.minusMinutes(timerTime.getMinute());\r\n                }\r\n                else{\r\n                    timerTime.plusMinutes(1);\r\n                }\r\n                break;\r\n            case 2:\r\n                if(timerTime.getSecond() >= 59){\r\n                    timerTime.minusSeconds(timerTime.getSecond());\r\n                }\r\n                else{\r\n                    timerTime.plusSeconds(1);\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n\r\n    public void decreaseData() {\r\n        // TODO implement here\r\n        switch (timerCursor){\r\n            case 0:\r\n                if(timerTime.getDayOfMonth() == 1 && timerTime.getHour() ==0 ){\r\n                    timerTime= LocalDateTime.of(2000,1,5,3,timerTime.getMinute(),timerTime.getSecond());\r\n                }\r\n                else{\r\n                    timerTime.plusHours(-1);\r\n                }\r\n                break;\r\n            case 1:\r\n                if(timerTime.getMinute() == 0){\r\n                    timerTime.plusMinutes(59);\r\n                }\r\n                else{\r\n                    timerTime.plusMinutes(-1);\r\n                }\r\n                break;\r\n            case 2:\r\n                if(timerTime.getSecond() == 0){\r\n                    timerTime.plusSeconds(59);\r\n                }\r\n                else{\r\n                    timerTime.plusSeconds(-1);\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n\r\n    public void saveTimer() {\r\n        // TODO implement here\r\n        saveTimerFlag=true;\r\n    }\r\n\r\n    //\r\n    private void decreaseTimer() {\r\n        // TODO implement here\r\n        if(pauseTimerFlag){\r\n            return;\r\n        }\r\n\r\n        //\r\n        timerTime.minusSeconds(1);\r\n\r\n        LocalDateTime defaulTime=LocalDateTime.of(2000,1,1,0,0,0);\r\n        if(defaulTime.isAfter(timerTime)){\r\n            //ModeManager.beepbuzzer()\r\n            pauseTimerFlag=true;\r\n            timerTime=LocalDateTime.of(2000,1,1,0,0,0);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    public void startTimer() {\r\n        // TODO implement here\r\n        pauseTimerFlag=false;\r\n    }\r\n\r\n\r\n    public void pauseTimer() {\r\n        // TODO implement here\r\n        pauseTimerFlag=true;\r\n    }\r\n\r\n\r\n    public void resumeTimer() {\r\n        // TODO implement here\r\n        pauseTimerFlag=false;\r\n    }\r\n\r\n\r\n    public void cancelTimer() {\r\n        // TODO implement here\r\n        timerTime= LocalDateTime.of(2000,1,1,0,0,0);\r\n\r\n\r\n    }\r\n    public int getCurrentCursor() {\r\n        return this.timerCursor;\r\n    }\r\n    public LocalDateTime getTimerTime() {return this.timerTime;}\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/Sys/Timer.java	(revision 48ef8dbd6597f99362e4a1c367e4670a02bedbc1)
+++ src/main/java/Sys/Timer.java	(date 1591077762248)
@@ -133,6 +133,7 @@
         //
         timerTime.minusSeconds(1);
 
+
         LocalDateTime defaulTime=LocalDateTime.of(2000,1,1,0,0,0);
         if(defaulTime.isAfter(timerTime)){
             //ModeManager.beepbuzzer()
